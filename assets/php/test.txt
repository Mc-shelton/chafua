
      <FlatList
        data={orderList}
        keyExtractor={(item)=>item.ordeer}
        renderItem={() => {
          return (
            <TouchableOpacity
              style={styles.cartItem}
              onPress={() => {
                setcAlert(true);
                setTimeout(() => {
                  // alert()
                  setcAlert(false);
                }, 2000);
              }}
              onLongPress={() => alert("cancel?")}
            >
              <View
                style={{
                  border: "2px solid red",
                  height: "100px",
                  width: "100px",
                  borderRadius: "100%",
                  marginLeft: "10px",
                }}
              />
              <View
                style={{
                  marginLeft: "20px",
                  maxWidth: "50%",
                  // border:'2px solid red'
                }}
              >
                <Text
                  style={{
                    position: "absolute",
                    left: "180px",
                    fontSize: "18px",
                    color: "red",
                  }}
                >
                  x2
                </Text>
                <Text
                  style={{
                    fontSize: "20px",
                  }}
                >
                  {/* {orderList} */}
                </Text>
                <Text
                  style={{
                    color: "grey",
                  }}
                >
                  hotelname
                </Text>
                <Text
                  style={{
                    fontSize: "25px",
                    marginTop: "10px",
                  }}
                >
                  20.00{" "}
                  <span
                    style={{
                      fontSize: "14px",
                      color: "red",
                      fontWeight: "bold",
                    }}
                  >
                    /=
                  </span>
                </Text>
              </View>
            </TouchableOpacity>
          );
        }}
        style={{
          width: "90%",
          marginLeft: "5%",
          marginTop: "0px",
          paddingBottom: "100px",
          // border:'2px solid red'
        }}
        showsHorizontalScrollIndicator={false}
      />












      orderList

       const handleCancel = (items, ind) => {
    if (items.length > 0) {
      items = JSON.stringify(items);
    } else {
      items = "Remove";
    }
    axios({
      method: "POST",
      url: "http://localhost/chafua/cancelOrder.php",
      data: {
        orderID: ind,
        orders: items,
      },
    })
      .then((res) => {
        fetch();
        navigation.isFocused()
        alert(res.data);
        if(res.data == 'Order Removed'){
          window.location.reload()
        }


      })
      .catch(() => {
        alert("Sorry, network error!!");
        fetch();
      });
  };

  const fetch = () => {
    AsyncStorage.getItem("user").then((res) => {
      let user = JSON.parse(res);
      let resData;
      axios({
        method: "POST",
        url: "http://localhost/chafua/getOrders.php",
        data: {
          userID: user.userID,
        },
      })
        .then((response) => {
          if (typeof response.data != "string") {
            setOrderList(response.data);
            let filter = response.data.filter((item) => item.orders);
            let total = 0;
            filter.forEach((array) => {
              JSON.parse(array.orders).forEach((value) => {
                let itTotal = parseInt(value.price) + parseInt(value.packaging);
                let isTotal = itTotal * parseInt(value.count);
                total += parseInt(isTotal);
              });
            });
            setTotalPrice(total);
          }
        })
        .catch((err) => {
          alert("Failed to fetch");
        });
    });
  };
  useEffect(() => {
    const willFocus = navigation.addListener("focus", () => {
      fetch();
    });
    return willFocus;
  });